---
title: Access API data via R
number-sections: true
number-depth: 3
---

```{r setup, include=FALSE}
#| file: functions.R

knitr::opts_chunk$set(eval = TRUE, echo = TRUE, include = TRUE)
# tell R to not use scientific notation
options(scipen=999)
```

AKFIN has developed web services (apis) to distribute GAP data. Like the GAP_PRODUCTS schema, these are under active development. These do not require VPN or an oracle connection but they are protected by Oracle authentication, please contact matt.callahan@noaa.gov for information on how to get an api token to use this option.

The url structure is "https://apex.psmfc.org/akfin/data_marts/gap_products/gap_[base table name]" . For example "https://apex.psmfc.org/akfin/data_marts/gap_products/gap_biomass" is the base url to get data from the akfin_biomass table. Web services linked to large tables have mandatory parameters to reduce data download size. For example to get agecomp data for Bering Sea pollock in area_id 10 in 2022 you would use "https://apex.psmfc.org/akfin/data_marts/gap_products/gap_biomass?survey_definition_id=98&area_id=10&species_code=21740&start_year=2022&end_year=2022”.

If you’re using R to pull data through web services you might find the [akfingapdata](https://github.com/MattCallahan-NOAA/akfingapdata/tree/main) (pronounced **akfin-gap-data** not **ak-eff-ing-app-data**) R package helpful.


### Load packages and helpful functions

```{r akfin-api-fn}
# load libraries
library(dplyr)
library(magrittr)
library(httr)
library(flextable)
# devtools::install_github("MattCallahan-NOAA/akfingapdata")
library(akfingapdata)

# function for pulling data from the api using the httr package
get_gap_biomass<-function(area_id, species_code) {
  # paste(... collapse=",") puts commas between vector elements
  area_id <- paste(area_id, collapse = ",")
  species_code <- paste(species_code, collapse = ",")
  # httr code, parameters are after the '?'
  httr::content(
    httr::GET(paste0("https://apex.psmfc.org/akfin/data_marts/akmp/gap_biomass?area_id=",
                     area_id,
                     "&species_code=",
                     species_code)),
    type = "application/json") %>%
    # convert to data frame
    bind_rows()
}
```

## Ex. Direct database query in R using the [akfingapdata R package README](https://github.com/MattCallahan-NOAA/akfingapdata/blob/main/README.Rmd):

```{r}
#| label: test-2a
#| eval: false

# load packages
library(odbc)
library(getPass)
library(tidyverse)

# connect to AKFIN Oracle database
con <- dbConnect(odbc::odbc(), "akfin", UID=getPass(msg="USER NAME"), PWD=getPass())
```

```{r}
#| label: test-2b
#| eval: true
#| echo: false

library(odbc)
library(getPass)
library(tidyverse)

con <- channel_akfin
```


```{r}
#| label: test-2c
#| tbl-cap: "Ex. Load data with {akfingapdata}. "
#| eval: false

library(DBI)
library(magrittr)

# define species code for pollock
my_species <- 21740

#query database
data<- DBI::dbFetch(dbSendQuery(conn = con,
                                statement = 
                           paste0("select * from gap_products.akfin_biomass 
where species_name = ", my_species, 
" and survey_definition_id = 98, 
and area_id = 10"))) %>%
dplyr::rename_with(tolower) # everyone likes lower case letters better

head(data)
```

Sign into akfin with token (need to request token from AKFIN)

```{r}
#| eval: false
library(akfingapdata)
token <- akfingapdata::create_token(x = paste0(dirname(here::here()), "/akfin_token.txt"))
```

```{r}
#| label: test-3
#| tbl-cap: "Ex. 2: Load catch data with {akfingapdata}. "
#| eval: false
#| echo: true

akfingapdata::get_gap_catch()[,1:6] %>% 
  head() %>% 
  flextable::flextable() %>%
  flextable::theme_zebra()
```

